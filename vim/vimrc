"====================
" Vundle
"====================

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar' " require exuberant-ctags
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'mhinz/vim-signify'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'junegunn/vim-easy-align'
Plugin 'othree/html5.vim'
Plugin 'ap/vim-css-color'
Plugin 'pangloss/vim-javascript'
Plugin '1995eaton/vim-better-javascript-completion'
Plugin 'vim-ruby/vim-ruby'
Plugin 'slim-template/vim-slim'
Plugin 'noprompt/vim-yardoc'
Plugin 'docteurklein/php-getter-setter.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'morhetz/gruvbox'

Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'

call vundle#end()
filetype plugin indent on


"====================
" General
"====================

set background=dark
let g:gruvbox_italic=1
colorscheme gruvbox

syntax on " before vim-signify configuration
set number
set encoding=utf-8
set fileencoding=utf-8

set showmatch         " When a bracket is inserted, briefly jump to the matching one
set laststatus=2      " Always display the status line
set showcmd           " Show (partial) command in the last line of the screen
set wildmenu          " Command-line completion enhanced
set scrolloff=2       " Minimal number of screen lines to keep above and below the cursor
set cursorline        " Highlight the screen line of the cursor
set mouse=n           " Enable Mouse en normal mode.

set hlsearch          " When there is a previous search pattern, highlight all its matches
set ignorecase        " Ignoring case in a pattern
set incsearch         " While typing a search command, show where the pattern, as it was typed so far, matches

set smartindent       " Do smart autoindenting when starting a new line
set tabstop=2         " Number of spaces that a <Tab> in the file counts for
set shiftwidth=2      " Alignment with '<' and '>'
set expandtab         " Use spaces instead of tab

hi SpellBad cterm=underline ctermfg=red
hi SpellCap cterm=underline ctermfg=33

if &diff
  set cursorline!
endif

" Show special characters
" Insert a non-breaking space: <C-k> <space> <space>
set list
set listchars=tab:>\ ,trail:\ ,nbsp:+
highlight NoSpacesEOL ctermbg=red ctermfg=white guibg=#592929
match NoSpacesEOL / \+$/


" ==== neovim ====
if has("nvim")
  " Map <Esc> to exit terminal-mode
  tnoremap <Esc> <C-\><C-n>

  " Live substitution
  se inccommand=nosplit

  " 24-bit color
  if has("termguicolors")
    set termguicolors
  endif
endif


"====================
" Syntax
"====================

autocmd BufEnter todo set filetype=todo


"====================
" PHP
"====================

let php_sql_query=1       " SQL syntax highlighting inside Strings
let php_htmlInStrings=1   " Enable HTML syntax highlighting inside strings


"====================
" Ruby
"====================

" see :help ft-ruby-omni

"autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
"autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1 " This may cause some code execution
"autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"autocmd FileType ruby,eruby let g:rubycomplete_include_object = 1
"autocmd FileType ruby,eruby let g:rubycomplete_include_objectspace = 1
let ruby_spellcheck_strings = 1


"====================
" Completion
"====================

set completeopt=menuone,preview

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
autocmd CursorMovedI  * if pumvisible() == 0|pclose|endif
autocmd InsertLeave   * if pumvisible() == 0|pclose|endif

" For completion of words (ctrl + x ctrl + k)
set dictionary+=/usr/share/dict/words


"====================
" Spellchecking
"====================

" Vim spell checker (z=)
if has("spell")
  setlocal spell spelllang=
  map ,lf :setlocal spell spelllang=fr<cr>
  map ,le :setlocal spell spelllang=en<cr>
  map ,ln :setlocal spell spelllang=<cr>
endif

set spellsuggest=5


"====================
" Automatic headers
"====================

autocmd bufnewfile *.sh   so ~/.vim/header/sh
autocmd bufnewfile *.php  so ~/.vim/header/php
autocmd bufnewfile *.rb   so ~/.vim/header/ruby


"====================
" Plugins configuration
"====================

" vim-yardoc
hi link yardGenericTag  rubyInstanceVariable
hi link yardType        Type
hi link yardLiteral     Type

" nerdtree and nerdtree-tabs
nmap <silent> <F9> :NERDTreeTabsToggle<RETURN>
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" vim-airline
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme='raven'

" vim-signify
let g:signify_vcs_list = [ 'git' ]

" tagbar
nmap <F8> :TagbarToggle<CR>

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 5
" Ignore warings for eruby
autocmd FileType eruby let g:syntastic_quiet_messages = {"level": "warnings"}

" vim-javascript
let g:javascript_plugin_jsdoc = 1 " Enables syntax highlighting for JSDocs

" easy-align
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" nerdcommenter
nnoremap ,c :call NERDComment(0,"toggle")<CR>
vnoremap ,c :call NERDComment(0,"toggle")<CR>
